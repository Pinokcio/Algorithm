from collections import Counter
def solution(land, P, Q):
    li = [] #[높이, 해당높이까지 있는 블록의 수, 해당 블록 높이 위에 쌓인 누적 블록 수]
    counter = Counter()
    for i in range(len(land)):
        for j in range(len(land[i])):
            counter[land[i][j]] += 1
    total = 0 #총 블록 수
    counter_total = 0
    size = len(land[i])*len(land)
    for c in sorted(counter, reverse = True):
        total += c*counter[c]
        counter_total += counter[c]
        li.append([c, counter_total, total])
    li = li[::-1]
    
    tmp = (total - li[0][0]*li[0][1]) * Q #가장 낮은 줄(li[0][0])로 만드는걸 초기값으로 설정
    bef = tmp
    for i in range(1, len(li)):
        tmp += -(li[i][0]-li[i-1][0])*li[i][1]*Q + (li[i][0]-li[i-1][0])*(size-li[i][1])*P
        if tmp >= bef:
            return bef
        bef = tmp
    return bef
    
"""
모든 칸의 블록 높이가 다 같도록 맞춰주돼 블록을 추가하거나 삭제할 때 들어가는 cost가 최소가 되도록 한다.
1. 제일 낮은 칸의 블록 높이로 모두 맞춰주고 그 때 삭제해야하는 코스트를 계산한다.
2. 그 다음 낮은 칸의 블록 높이로 늘렸을 때, 이전보다 덜 삭제되는 블록의 코스트만큼 이전 코스트에서 빼주고, 늘어난 높이의 블록수만큼 추가되는 블록의 코스트만큼 이전 코스트에서 더해준다.
3. 2번 과정을 반복하면서 높이가 같거나 커지는 순간이 오면 그 때가 최소이므로 정답이다.
4. 마지막까지 return되지 않으면 가장 마지막 코스트가 최소이므로 가장 마지막에 계산되는 코스트가 정답이다.
"""
