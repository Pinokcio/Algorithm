# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorder(self, cur, his):
        if cur.left is not None:
            self.inorder(cur.left, his)
        his.append(cur.val)
        if cur.right is not None:
            self.inorder(cur.right, his)
    def swap(self, a, b, cur):
        if cur.val == a:
            cur.val = b
        elif cur.val == b:
            cur.val = a
        if cur.left is not None:
            self.swap(a, b, cur.left)
        if cur.right is not None:
            self.swap(a, b, cur.right)
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        his = []
        self.inorder(root, his)
        temp = sorted(his)
        for i in range(len(temp)):
            if temp[i] != his[i]:
                fix = temp[i], his[i]
                break
        self.swap(fix[0], fix[1], root)
        print(root)
        
        """
        정상적인 BST는 inorder순회했을 때, 오름차순으로 정렬된다.
        오름차순으로 정렬되지 않는 노드 두개를 교체하면 된다.
        """
