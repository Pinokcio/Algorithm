class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        length = len(nums)
        max_sum = nums[0]
        ans = max_sum
        for i in range(1, length):
            max_sum = max(max_sum + nums[i], nums[i])
            ans = max(ans, max_sum)
        return ans
        
# Kadane's Algorithms.
# dp의 일종. 이전 누적합과 현재 값을 비교해서 현재 값이 더 크면 현재 값부터 다시 누적 시작
# 위 과정을 반복하면서 생긴 누적합들 중 최댓값을 출력. O(N) 시간복잡도
