# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
def inorder(cur, his):
    if cur is None:
        return
    inorder(cur.left, his)
    his.append(cur.val)
    inorder(cur.right, his)
    
class BSTIterator:

    def __init__(self, root: Optional[TreeNode]):
        self.his = []
        inorder(root, self.his)
        self.idx = 0
        self.length = len(self.his)
        
    def next(self) -> int:
        ans = self.his[self.idx]
        self.idx += 1
        return ans
    
    def hasNext(self) -> bool:
        if self.idx<self.length:
            return True
        return False

# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
