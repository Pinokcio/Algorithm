class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:
        dp = [[0, 0] for _ in range(max(nums)+1)]
        n = [0 for _ in range(max(nums)+1)]
        for i in nums:
            n[i] += i
        dp[0][0] = 0
        dp[0][1] = n[0]
        for i in range(1, max(nums)+1):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1])
            dp[i][1] = max(dp[i][0], dp[i-1][0] + n[i])
        return max(dp[-1])
        
"""
일단 dp문제임.
dp를 정의해볼까.
dp[i][0] : i번째 요소에서 i를 넣지 않았을 때의 값
dp[i][1] : i번째 요소에서 i를 넣었을 때의 값

"""
class Solution:
    def getdp(self, dp, n, nums):
        if dp[n] != -1:
            return dp[n]
        dp[n] = max(self.getdp(dp, n-1, nums), self.getdp(dp, n-2, nums) + nums[n])
        return dp[n]
    def deleteAndEarn(self, nums: List[int]) -> int:
        dp = [-1 for _ in range(max(nums)+1)]
        n = [0 for _ in range(max(nums)+1)]
        for i in nums:
            n[i] += i
        dp[0] = n[0]
        dp[1] = max(n[0], n[1])
        return self.getdp(dp, max(nums), n)
        
        
"""
일단 dp문제임.
dp를 정의해볼까.
dp[i] = i개까지 고려했을 때 최댓값
"""
