from collections import defaultdict, Counter
class Solution:
    def init(self, length):
        self.graph = [ n for n in range(length) ]

    def find(self, x):
        while self.graph[x] != x:
            self.graph[x] = self.graph[self.graph[x]]
            x = self.graph[x]
        return x
    
    def union(self, x, y):
        x1, y1 = self.find(x), self.find(y)
        self.graph[x1] = y1
        
    def minimumHammingDistance(self, source: List[int], target: List[int], allowedSwaps: List[List[int]]) -> int:
        
        self.init(len(source))
        for a in allowedSwaps:
            self.union(a[0], a[1])
    
        dic = defaultdict(list)
        for i in range(len(source)):
            dic[self.find(i)].append(i)
            
        groups = defaultdict(list)
        for i in range(len(source)):
            i1 = self.find(i)
            groups[i1].append(i)

        ans = 0
        for ids in groups.values():
            counter = Counter()
            for idx in ids:
                counter[source[idx]] -= 1
                counter[target[idx]] += 1
            ans += sum(abs(val) for val in counter.values())//2
        return ans
        """
        union-find로 서로 이어진 index를 확인.
        ids에 있는 idx끼리는 서로 연결된 index이다.
        source[idx]는 1 빼고, target[idx]는 1 더한다. src -> trg
        만약 해당 과정을 수행했을 때 나중에 값이 0이 아닌 index는 해당 그룹에서 연결된 인덱스끼리로는 해결 할 수 없으므로 
        ans += 1 해준다. 다만 두개가 하나의 짝을 이뤄야 하나의 오류로 인정되므로 절대값을 모두 더한뒤 2로 나누어주며 더한다.
        """
