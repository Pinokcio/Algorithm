import sys
sys.setrecursionlimit(10**6)

def getdp(dp, n, dic_team, sales):
    if dp[n][0] != -1 and dp[n][1] != -1:
        return dp[n]
    tmp = []
    b = 0
    for i in dic_team[n]:
        a = 0
        for j in dic_team[n]:
            if i == j:
                a += getdp(dp, j, dic_team, sales)[1]
            else:
                a += getdp(dp, j, dic_team, sales)[0]
        tmp.append(a)
        b += min(dp[i])
    dp[n][1] = min(min(tmp), b) + sales[n-1]
    dp[n][0] = min(min(tmp), dp[n][1])
    return dp[n]
    
    
    
def solution(sales, links):
    answer = 0
    dic_team = {}
    for l in links:
        if l[0] in dic_team:
            dic_team[l[0]].append(l[1])
        else:
            dic_team[l[0]] = [l[1]]
    dp = [[-1, -1] for _ in range(len(sales)+1)]
    
    for i in range(2, len(sales)+1):
        if i not in dic_team:
            dp[i][0] = 0
            dp[i][1] = sales[i-1]
    getdp(dp, 1, dic_team, sales)
    answer = min(dp[1])
    return answer

"""
- 모든 팀에서 최소 1명이 참가하며, 참가한 직원들의 매출액이 최소가 되도록 한다.
- 팀장으로 팀을 나눈다.
- 하나의 팀은 팀장과(팀장은 다른 팀의 팀원이기도 하다), 다른 팀원으로 구성된다.
- 트리 구조로 표현된다.
- 서브트리 중 최소 하나의 트리가 팀장을 포함하거나(=dp[i][0]), 모두 포함하지 않는 경우 본인의 sales값을 포함한다(=dp[i][1]). #조건을 만족하기 위해선 트리와 서브트리에 공통적으로 
존재하는 서브트리의 팀장이 포함돼있거나, 팀장이 포함되지 않은 서브트리에 경우에는 팀원이 하나씩 배정되어야 한다. 만약 모든 서브트리에서 팀장이 아닌 팀원을 선택할 경우 트리의 팀장이
선택되어야한다.
- dp[i][1]은 무조건 해당 트리의 팀장을 포함한다.
- dp[i][0]은 해당 트리의 팀장을 포함하지 않을 수도 있다. 
- 따라서 현재 트리의 값을 구하고자 할 때 모든 서브트리의 dp[ci][0]을 더하고 현재 트리의 sales[i-1]값(팀장을 포함)을 더하거나, 적어도 하나의 dp[ci][1]포함하여 더하는 두가지 경우가 있다. 
- dp[i][1]은 무조건 sales[i-1](팀장을 포함)을 더하지만, dp[i][0]은 해당 트리의 팀장을 포함하지 않을 수도 있으므로 서브트리의 팀장을 적어도 하나 포함하거나 해당 트리의 팀장을 포함한
dp[i][1] 중 더 작은 값으로 한다.
"""
