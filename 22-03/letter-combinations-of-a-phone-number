dic = {2:['a','b','c'], 3:['d','e','f'], 4:['g','h','i'], 5:['j','k','l'], 6:['m','n','o'], 7:['p','q','r','s'], 8:['t','u','v'], 9:['w','x','y','z']}
def dfs(cur, digits, length, order, cnt, answer):
    if cnt == length:
        answer.append("".join(cur))
        return
    for i in range(len(dic[digits[order]])):
        temp = cur[:]
        temp.append(dic[digits[order]][i])
        dfs(temp, digits, length, order+1, cnt+1 ,answer)

class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        digits = list(map(int,list(digits)))
        answer = []
        if len(digits) == 0:
            return []
        dfs([], digits, len(digits), 0, 0, answer)
        return answer
