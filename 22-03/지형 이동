from collections import deque
import heapq as hq
dx = [1, 0, -1, 0]
dy = [0, 1, 0, -1]
def solution(land, height):
    answer = 0
    visit = [[0 for _ in range(len(land))] for _ in range(len(land))]
    q = []
    hq.heappush(q, (0, 0, 0))
    while q:
        cnt, x, y = hq.heappop(q)
        if visit[y][x]:
            continue
        visit[y][x] = 1
        answer += cnt
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0<=nx<len(land) and 0<=ny<len(land):
                if abs(land[ny][nx] - land[y][x]) > height:
                    hq.heappush(q, (abs(land[ny][nx] - land[y][x]) ,nx, ny))
                else:
                    hq.heappush(q, (0, nx, ny))
    return answer
"""
heapq를 이용해서 주변 노드로 퍼져나간다. 
이때 이동거리가 최소인것부터 퍼져나가는데 height보다 높이 차이가 낮은 노드 끼리는 0이므로 이들이 먼저 처리될 것이다.
height 이상의 높이 차이가 나지만 visit을 통해 확인했을 때 아직 방문하지 못하 노드는 그 경계선에 해당하는 것들 중 높이 차이가 최소한인 노드가 선택될 것이다.
해당 노드에 방문함으로써 또 새로운 노드에 접근 가능할테고, 위와 같은 과정이 똑같이 반복되며 모든 노드를 방문하게 될 것이다.
이 때 height 이상의 높이 차이가 나는 노드를 방문할때만 그 차이만큼을 answer 에 더해준다. (사다리 설치 비용)
"""
