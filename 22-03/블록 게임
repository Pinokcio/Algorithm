def check_b(board, dic, y, x, len1, len2):
    li = []
    color = -1
    f1 = 0
    if y+2<len1 and x+1<len2:
        tmp = [[0 for i in range(2)] for j in range(3)]
        for i in range(3):
            for j in range(2):
                if board[y+i][x+j] != 0 and color == -1:
                    color = board[y+i][x+j]
                if board[y+i][x+j] == color:
                    tmp[i][j] = 1
                else:
                    tmp[i][j] = 0
                    if board[y+i][x+j] != 0:
                        f1 = 1
        for i in tmp:
            li.append(tuple(i))
    tu1 = tuple(li)
    
    li = []
    color = -1
    f2 = 0
    if y+1<len1 and x+2<len2:
        tmp = [[0 for i in range(3)] for j in range(2)]
        for i in range(2):
            for j in range(3):
                if board[y+i][x+j] != 0 and color == -1:
                    color = board[y+i][x+j]
                if board[y+i][x+j] == color:
                    tmp[i][j] = 1
                else:
                    tmp[i][j] = 0
                    if board[y+i][x+j] != 0:
                        f2 = 1
        for i in tmp:
            li.append(tuple(i))
    tu2 = tuple(li)
    if tu1 in dic and f1 == 0:
        return dic[tu1]
    if tu2 in dic and f2 == 0:
        return dic[tu2]
    return -1

def solution(board):
    answer = 0
    dic = {}
    dic[((1,0,0),(1,1,1))] = 1
    dic[((0,1,0),(1,1,1))] = 2
    dic[((0,0,1),(1,1,1))] = 3
    dic[((1,0),(1,0),(1,1))] = 4
    dic[((0,1),(0,1),(1,1))] = 5
    len1 = len(board)
    len2 = len(board[0])
    bef = -1
    
    while bef != answer:
        bef = answer
        ceil_b = [-1 for _ in range(len2)]
        for i in range(len1):
            for j in range(len2):
                tmp = check_b(board, dic, i, j, len1, len2)
                if tmp == 1:
                    if ceil_b[j+1] == ceil_b[j+2] == -1:
                        answer += 1
                        tu = ((1,0,0),(1,1,1))
                        for k in range(2):
                            for h in range(3):
                                if tu[k][h] == 1:
                                    board[i+k][j+h] = 0
                elif tmp == 2:
                    if ceil_b[j] == ceil_b[j+2] == -1:
                        answer += 1
                        tu = ((0,1,0),(1,1,1))
                        for k in range(2):
                            for h in range(3):
                                if tu[k][h] == 1:
                                    board[i+k][j+h] = 0
                elif tmp == 3:
                    if ceil_b[j] == ceil_b[j+1] == -1:
                        answer += 1
                        tu = ((0,0,1),(1,1,1))
                        for k in range(2):
                            for h in range(3):
                                if tu[k][h] == 1:
                                    board[i+k][j+h] = 0
                elif tmp == 4:
                    if ceil_b[j+1] == -1:
                        answer += 1
                        tu = ((1,0),(1,0),(1,1))
                        for k in range(3):
                            for h in range(2):
                                if tu[k][h] == 1:
                                    board[i+k][j+h] = 0
                elif tmp == 5:
                    if ceil_b[j] == -1:
                        answer += 1
                        tu = ((0,1),(0,1),(1,1))
                        for k in range(3):
                            for h in range(2):
                                if tu[k][h] == 1:
                                    board[i+k][j+h] = 0
                else:
                    if board[i][j] != 0:
                        ceil_b[j] = i
    
    return answer
    
"""
일단 제거 될 수 있는 도형 5개를 추림. 이 모양 외의 도형은 다 지워질 수 없는 도형들.
위가 막혀있으면 지워질 수 없는 것으로 간주
검은 블록이 들어가야 할 자리에 다른 블록이 들어가 있어도 지워질 수 없는 것으로 간주
  -> 이 경우 막고 있던 블록이 지워질 가능성이 있으므로 새로이 지워지는 블록이 없을 때까지 블록 지우는 과정을 반복한다.
"""
