def dpsol(dp, triangle, n, m):
    if dp[n][m] >= 0:
        return dp[n][m]
    if m == 0:
        dp[n][m] = dpsol(dp, triangle, n-1, m) + triangle[n][m]
    elif m >= n:
        dp[n][m] = dpsol(dp, triangle, n-1, m-1) + triangle[n][m]
    else:
        dp[n][m] = max(dpsol(dp, triangle, n-1, m) + triangle[n][m], dpsol(dp, triangle, n-1, m-1) + triangle[n][m])
    return dp[n][m]

def solution(triangle):
    answer = 0
    dp = [[-1]*i for i in range(1, len(triangle)+1)]
    dp[0][0] = triangle[0][0]
    for i in range(len(triangle)):
        dpsol(dp, triangle, len(triangle)-1, i)
    answer = max(dp[-1])
    return answer
