from itertools import combinations
def solution(relation):
    answer = 0
    l_x = len(relation[0])
    l_y = len(relation)
    res = set()
    for i in range(1, l_x+1):
        for c in combinations(range(0,l_x),i):
            for s in res:
                if set(s).issubset(c):
                    break
            else:
                li = []
                for j in range(0, l_y):
                    li.append(tuple(relation[j][k] for k in c))
                if len(li) == len(set(li)):
                    res.add(c)
    return len(res)
    
    #가능한 속성 조합을 구한 후 해당 조합을 모든 튜플에 적용시킨다. 그 후 중복된 원소가 있는지 확인한 후 중복되는 튜플셋은 후보키 명단에서 제외시킨다.
    #중복되지 않는 튜플셋은 후보키 set에 들어가게 되는데 이 후 구하게 되는 속성 조합의 subset이 후보키 set에 존재하면 해당 속성 조합은 후보키가 될 수 없으므로 건너뛰면서
    #모든 가능한 조합을 구한다.
