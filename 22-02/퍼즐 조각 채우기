def dfs(game_board, y, x, n, ret, typ): #typ == 1이면 game_board, 0이면 table
    dx = [1, 0, -1, 0]
    dy = [0, 1, 0, -1]
    cnt = 0
    game_board[y][x] = typ
    ret.append([y,x])
    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        if ny>=n or ny<0 or nx>=n or nx<0 or game_board[ny][nx] == typ:
            pass
        else:
            dfs(game_board, ny, nx, n, ret, typ)
    return ret
    
def setandturn(block):
    block.sort(key = lambda x : [x[0], x[1]])
    dy = -block[0][0]
    dx = -block[0][1]
    ret = []
    for i in range(len(block)):
        block[i][0] += dy
        block[i][1] += dx
        if block[i][0]>=0 and block[i][1]>=0:
            ret.append([block[i][1], -block[i][0]])
        elif block[i][0]>=0 and block[i][1]<0:
            ret.append([block[i][1],-block[i][0]])
        elif block[i][0]<0 and block[i][1]<0:
            ret.append([block[i][1], -block[i][0]])
        else:
            ret.append([block[i][1], -block[i][0]])
    return ret

def list_compare(board_block, table_block):
    memo = [0] * len(table_block)
    size = 0
    
    for b in board_block:
        flag = 0
        for t in range(len(table_block)):
            if memo[t] == 1:
                continue
            tmp = table_block[t]
            for _ in range(4):
                tmp = setandturn(tmp)
                if b == tmp:
                    size += len(tmp)
                    memo[t] = 1
                    flag = 1
                    break
            if flag:
                break
    return size
            
def solution(game_board, table):
    answer = -1
    n = len(game_board)
    board_block = []
    table_block = []
    for i in range(n):
        for j in range(n):
            if game_board[i][j] == 0:
                board_block.append(dfs(game_board, i, j, n, [], 1))
    for i in range(n):
        for j in range(n):
            if table[i][j] == 1:
                table_block.append(dfs(table, i, j, n, [], 0))
            
    for i in range(len(board_block)):
        board_block[i] = setandturn(board_block[i])
    
    answer = list_compare(board_block, table_block)
    return answer
