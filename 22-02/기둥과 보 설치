def possible(board, x, y, a, n):
    if board[y][x][a] == 0:
        return True
    if a == 0:
        if y == 0:
            return True
        elif board[y-1][x][0] == 1:
            return True
        elif board[y][x-1][1] == 1 or board[y][x][1] == 1:
            return True
        else:
            return False
    else:
        if y >= 1 and (board[y-1][x][0] == 1 or (x <= n-1 and board[y-1][x+1][0] == 1)):
            return True
        elif (x >= 1 and board[y][x-1][1] == 1) and (x <= n-1 and board[y][x+1][1] == 1):
            return True
        else:
            return False
        
def solution(n, build_frame):
    answer = []
    board = [[[0, 0] for i in range(n+1)] for j in range(n+1)]
    for i in build_frame:
        x, y, a, b = i
        if b == 0: #삭제
            board[y][x][a] = 0
            if a == 0:
                if possible(board, x-1, y+1, 1, n) and possible(board, x, y+1, 1, n) and possible(board, x, y+1, 0, n):
                    pass
                else:
                    board[y][x][a] = 1
            else:
                if possible(board, x-1, y, 1, n) and possible(board, x, y, 0, n) and possible(board, x+1, y, 0, n) and possible(board, x+1, y, 1, n):
                    pass
                else:
                    board[y][x][a] = 1
                    
        elif b == 1: #설치
            board[y][x][a] = 1
            if possible(board, x, y, a, n):
                pass
            else:
                board[y][x][a] = 0
    for i in range(n+1):
        for j in range(n+1):
            if board[i][j][0]:
                answer.append([j,i,0])
            if board[i][j][1]:
                answer.append([j,i,1])
    answer.sort()
    return answer
    
    # 삭제시 possible을 고려해야하는 위치를 헤매서 시간이 오래걸린 문제.
    # 기둥 삭제 시 3곳, 보 삭제 시 4곳을 고려해야함
    # 기둥의 경우 '세워진 곳 위에 기둥이 세워져 있는지', '세워진 곳 왼쪽에 보를 설치했는지', '세워진 곳 오른쪽에 보를 설치했는지'를 고려해야한다.
    # 보 삭제의 경우 '세워진 곳 왼쪽에 보를 설치했는지', '세워진 곳 오른쪽에 보를 설치했는지', '세워진곳에 기둥을 설치했는지', '세워진곳 오른쪽에 기둥을 설치했는지'를 고려해야한다.
