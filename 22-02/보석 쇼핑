from collections import deque
def solution(gems):
    answer = []
    q = deque()
    s = 0
    e = 0
    min_s = 0
    min_e = 10000000
    q.append(gems[0])
    overone = 1
    gem_st = set(gems)
    length = len(gem_st)
    dic = {}
    for g in list(gem_st):
        dic[g] = 0
    dic[q[0]] += 1
    while True: #q에 gem_li가 다 없으면 e += 1, 다 있으면 s += 1 하면서 최단구간을 찾는다
        if overone != length:
            e += 1
            if e >= len(gems):
                break
            q.append(gems[e])
            dic[q[-1]] += 1
            if dic[q[-1]] == 1:
                overone += 1
        else :
            if e-s < min_e-min_s:
                min_e = e
                min_s = s
            s += 1
            if s > e:
                break
            dic[q[0]] -= 1
            if dic[q[0]] == 0:
                overone -= 1
            q.popleft()
            
    answer.append(min_s+1)
    answer.append(min_e+1)
    return answer
    
    #처음에는 q를 set으로 만들어서 보석종류를 담고있는 gem_st와 비교해서 같으면 s += 1, 다 없으면 e += 1 하는 방식을 사용했다.
    #이 때 set(q)가 O(N)의 시간복잡도를 갖기때문에 효율성 문제가 발생하였다.
    #보석 개수를 각각 담고있는 dictionary를 만들어 추가하고 빼는 과정에서 0이 되면 overone(1개 이상의 보석 갯수를 담은 변수) -= 1해주고, 1이되면 += 1해주는 과정을 통해 
    #현재 구간에서의 보석 종류 갯수를 세서 위 문제를 O(1)의 복잡도로 바꾸어주었다.
