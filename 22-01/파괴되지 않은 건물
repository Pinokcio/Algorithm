def solution(board, skill):
    answer = 0
    
    new_board = [[0]*(len(board[0])+1) for i in range(len(board)+1)]
    for s in skill:
        if s[0] == 1:
            new_board[s[1]][s[2]] -= s[5]
            new_board[s[1]][s[4]+1] += s[5]
            new_board[s[3]+1][s[2]] += s[5]
            new_board[s[3]+1][s[4]+1] -= s[5]
        else:
            new_board[s[1]][s[2]] += s[5]
            new_board[s[1]][s[4]+1] -= s[5]
            new_board[s[3]+1][s[2]] -= s[5]
            new_board[s[3]+1][s[4]+1] += s[5]
                
    for i in range(0, len(new_board)):
        for j in range(1, len(new_board[0])):
            new_board[i][j] = new_board[i][j] + new_board[i][j-1]
    for i in range(0, len(new_board[0])):
        for j in range(1, len(new_board)):
            new_board[j][i] = new_board[j][i] + new_board[j-1][i]
    for i in range(len(board)):
        for j in range(len(board[i])):
            board[i][j] += new_board[i][j]
            if board[i][j] >= 1:
                answer += 1
    return answer
    
    #효율성을 해결하는게 관건이었던 문제
    #타인의 힌트를 보고 누적합을 이용해 풀었음
    #누적합 방법은 효율성을 높이는데 탁월한 효과가 있으니 알아두면 좋을듯
